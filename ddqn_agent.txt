            env = make_env(args.env)
            agent = DDQNAgent(gamma=args.gamma,
                              epsilonMax=args.epsMax,
                              epsilonMin=args.epsMin,
                              epsilonDec=args.epsDec,
                              learnRate=args.learnRate,
                              inputDim=env.observation_space.shape,
                              numActions=env.action_space.n,
                              replayMemoryBufferSize=args.memSize,
                              replayMemoryBatchSize=args.batchSize,
                              targetNetworkUpdateInterval=args.replaceInterval,
                              networkSavePath=args.path,
                              evaluationName="eval",
                              networkName="DDQN",
                              computeActionHist=args.actionHist)

            if args.loadModel:
                agent.loadModel()

            scoreList, epsilonList, stepList = trainAgent(agent, env, args.numEpisodes, saveAgent=True, trainMode=True)
            plotLearnCurve(episodes=args.numEpisodes, scores=scoreList, epsilons=epsilonList, filename="./plots/DDQN" + args.evalName)